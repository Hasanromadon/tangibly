// This is your Prisma schema file for Asset Management SAAS
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Multi-tenant Companies
model Company {
  id                    String    @id @default(uuid())
  name                  String
  code                  String    @unique
  address               String?
  city                  String?
  province              String?
  postalCode            String?   @map("postal_code")
  country               String?   @default("Indonesia")
  phone                 String?
  email                 String?
  website               String?
  taxId                 String?   @map("tax_id")
  industry              String?
  logoUrl               String?   @map("logo_url")
  settings              Json      @default("{}")
  subscriptionPlan      String    @default("starter") @map("subscription_plan")
  subscriptionExpiresAt DateTime? @map("subscription_expires_at")
  isActive              Boolean   @default(true) @map("is_active")
  createdAt             DateTime  @default(now()) @map("created_at")
  updatedAt             DateTime  @updatedAt @map("updated_at")

  // Relations
  users           User[]
  userInvitations UserInvitation[]
  assets          Asset[]
  assetCategories AssetCategory[]
  locations       Location[]
  vendors         Vendor[]
  workOrders      WorkOrder[]
  auditLogs       AuditLog[]
  maintenanceTypes MaintenanceType[]
  assetMovements  AssetMovement[]

  @@map("companies")
}

// Users with RBAC
model User {
  id                String    @id @default(uuid())
  companyId         String    @map("company_id")
  employeeId        String?   @map("employee_id")
  email             String    @unique
  passwordHash      String    @map("password_hash")
  firstName         String    @map("first_name")
  lastName          String    @map("last_name")
  phone             String?
  department        String?
  position          String?
  role              String    @default("user") // super_admin, admin, manager, user, viewer
  permissions       Json      @default("[]")
  avatarUrl         String?   @map("avatar_url")
  isActive          Boolean   @default(true) @map("is_active")
  lastLogin         DateTime? @map("last_login")
  passwordChangedAt DateTime  @default(now()) @map("password_changed_at")
  emailVerifiedAt   DateTime? @map("email_verified_at")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")

  // Relations
  company             Company         @relation(fields: [companyId], references: [id], onDelete: Cascade)
  assignedAssets      Asset[]         @relation("AssetAssignee")
  createdAssets       Asset[]         @relation("AssetCreator")
  updatedAssets       Asset[]         @relation("AssetUpdater")
  assignedWorkOrders  WorkOrder[]     @relation("WorkOrderAssignee")
  createdWorkOrders   WorkOrder[]     @relation("WorkOrderCreator")
  updatedWorkOrders   WorkOrder[]     @relation("WorkOrderUpdater")
  approvedMovements   AssetMovement[] @relation("MovementApprover")
  createdMovements    AssetMovement[] @relation("MovementCreator")
  fromMovements       AssetMovement[] @relation("MovementFromUser")
  toMovements         AssetMovement[] @relation("MovementToUser")
  auditLogs           AuditLog[]
  sentInvitations     UserInvitation[] @relation("UserInviter")

  @@map("users")
}

// User Invitations for multi-tenant system
model UserInvitation {
  id            String   @id @default(uuid())
  companyId     String   @map("company_id")
  email         String
  role          String   @default("user")
  permissions   Json     @default("[]")
  invitedBy     String   @map("invited_by")
  token         String   @unique
  isAccepted    Boolean  @default(false) @map("is_accepted")
  expiresAt     DateTime @map("expires_at")
  acceptedAt    DateTime? @map("accepted_at")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  inviter   User    @relation("UserInviter", fields: [invitedBy], references: [id])

  @@map("user_invitations")
  @@unique([companyId, email])
}

// Asset Categories (ISO compliant)
model AssetCategory {
  id                       String  @id @default(uuid())
  companyId                String  @map("company_id")
  name                     String
  code                     String
  description              String?
  icon                     String?
  color                    String?
  depreciationMethod       String  @default("straight_line") @map("depreciation_method")
  usefulLifeYears          Int?    @map("useful_life_years")
  salvageValuePercentage   Float   @default(0) @map("salvage_value_percentage")
  isItAsset                Boolean @default(false) @map("is_it_asset")
  isEnvironmentalAsset     Boolean @default(false) @map("is_environmental_asset")
  parentId                 String? @map("parent_id")
  sortOrder                Int     @default(0) @map("sort_order")
  isActive                 Boolean @default(true) @map("is_active")
  createdAt                DateTime @default(now()) @map("created_at")
  updatedAt                DateTime @updatedAt @map("updated_at")

  // Relations
  company    Company         @relation(fields: [companyId], references: [id], onDelete: Cascade)
  parent     AssetCategory?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children   AssetCategory[] @relation("CategoryHierarchy")
  assets     Asset[]

  @@unique([companyId, code])
  @@map("asset_categories")
}

// Locations/Sites
model Location {
  id            String   @id @default(uuid())
  companyId     String   @map("company_id")
  name          String
  code          String
  description   String?
  address       String?
  city          String?
  province      String?
  postalCode    String?  @map("postal_code")
  coordinates   String?  // Store as "lat,lng" string
  contactPerson String?  @map("contact_person")
  contactPhone  String?  @map("contact_phone")
  contactEmail  String?  @map("contact_email")
  parentId      String?  @map("parent_id")
  isActive      Boolean  @default(true) @map("is_active")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  company         Company         @relation(fields: [companyId], references: [id], onDelete: Cascade)
  parent          Location?       @relation("LocationHierarchy", fields: [parentId], references: [id])
  children        Location[]      @relation("LocationHierarchy")
  assets          Asset[]
  fromMovements   AssetMovement[] @relation("MovementFromLocation")
  toMovements     AssetMovement[] @relation("MovementToLocation")

  @@unique([companyId, code])
  @@map("locations")
}

// Vendors/Suppliers
model Vendor {
  id           String   @id @default(uuid())
  companyId    String   @map("company_id")
  name         String
  code         String
  type         String?  // supplier, contractor, service_provider
  address      String?
  city         String?
  province     String?
  postalCode   String?  @map("postal_code")
  country      String?
  phone        String?
  email        String?
  website      String?
  taxId        String?  @map("tax_id")
  contactPerson String? @map("contact_person")
  contactPhone  String? @map("contact_phone")
  contactEmail  String? @map("contact_email")
  paymentTerms  String? @map("payment_terms")
  rating        Int?
  notes         String?
  isActive      Boolean  @default(true) @map("is_active")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  company    Company     @relation(fields: [companyId], references: [id], onDelete: Cascade)
  assets     Asset[]
  workOrders WorkOrder[]

  @@unique([companyId, code])
  @@map("vendors")
}

// Main Assets Model
model Asset {
  id                        String    @id @default(uuid())
  companyId                 String    @map("company_id")
  assetNumber               String    @unique @map("asset_number")
  name                      String
  description               String?
  categoryId                String?   @map("category_id")
  locationId                String?   @map("location_id")
  vendorId                  String?   @map("vendor_id")
  assignedTo                String?   @map("assigned_to")
  
  // Asset Details
  brand                     String?
  model                     String?
  serialNumber              String?   @map("serial_number")
  barcode                   String?
  qrCode                    String?   @map("qr_code")
  
  // Financial Information
  purchaseCost              Float?    @map("purchase_cost")
  purchaseDate              DateTime? @map("purchase_date")
  purchaseOrderNumber       String?   @map("purchase_order_number")
  invoiceNumber             String?   @map("invoice_number")
  warrantyExpiresAt         DateTime? @map("warranty_expires_at")
  
  // Depreciation
  depreciationMethod        String    @default("straight_line") @map("depreciation_method")
  usefulLifeYears           Int?      @map("useful_life_years")
  salvageValue              Float     @default(0) @map("salvage_value")
  accumulatedDepreciation   Float     @default(0) @map("accumulated_depreciation")
  bookValue                 Float?    @map("book_value")
  
  // Status and Lifecycle
  status                    String    @default("active") // active, inactive, maintenance, disposed, stolen, lost
  condition                 String    @default("good") // excellent, good, fair, poor, damaged
  criticality               String    @default("medium") // critical, high, medium, low
  
  // Environmental (ISO 14001)
  energyRating              String?   @map("energy_rating")
  carbonFootprint           Decimal?  @map("carbon_footprint") @db.Decimal(10, 3)
  recyclable                Boolean   @default(false)
  hazardousMaterials        String[]  @map("hazardous_materials")
  
  // IT Asset specific (ISO 27001)
  ipAddress                 String?   @map("ip_address")
  macAddress                String?   @map("mac_address")
  operatingSystem           String?   @map("operating_system")
  softwareLicenses          String[]  @map("software_licenses")
  securityClassification    String?   @map("security_classification")
  
  // Media and Documents
  images                    String[]
  documents                 String[]
  
  // Compliance
  lastAuditDate             DateTime? @map("last_audit_date") @db.Date
  nextAuditDate             DateTime? @map("next_audit_date") @db.Date
  complianceStatus          String    @default("compliant") @map("compliance_status")
  
  // Metadata
  tags                      String[]
  customFields              Json      @default("{}") @map("custom_fields")
  notes                     String?
  
  createdBy                 String?   @map("created_by")
  updatedBy                 String?   @map("updated_by")
  createdAt                 DateTime  @default(now()) @map("created_at")
  updatedAt                 DateTime  @updatedAt @map("updated_at")

  // Relations
  company       Company         @relation(fields: [companyId], references: [id], onDelete: Cascade)
  category      AssetCategory?  @relation(fields: [categoryId], references: [id])
  location      Location?       @relation(fields: [locationId], references: [id])
  vendor        Vendor?         @relation(fields: [vendorId], references: [id])
  assignee      User?           @relation("AssetAssignee", fields: [assignedTo], references: [id])
  creator       User?           @relation("AssetCreator", fields: [createdBy], references: [id])
  updater       User?           @relation("AssetUpdater", fields: [updatedBy], references: [id])
  workOrders    WorkOrder[]
  movements     AssetMovement[]

  @@map("assets")
}

// Asset Movements/Transfers
model AssetMovement {
  id               String    @id @default(uuid())
  companyId        String    @map("company_id")
  assetId          String    @map("asset_id")
  movementType     String    @map("movement_type") // transfer, loan, return, disposal, found, stolen
  fromLocationId   String?   @map("from_location_id")
  toLocationId     String?   @map("to_location_id")
  fromUserId       String?   @map("from_user_id")
  toUserId         String?   @map("to_user_id")
  movementDate     DateTime  @default(now()) @map("movement_date")
  reason           String?
  approvalStatus   String    @default("pending") @map("approval_status") // pending, approved, rejected
  approvedBy       String?   @map("approved_by")
  approvedAt       DateTime? @map("approved_at")
  createdBy        String?   @map("created_by")
  createdAt        DateTime  @default(now()) @map("created_at")

  // Relations
  company      Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  asset        Asset     @relation(fields: [assetId], references: [id], onDelete: Cascade)
  fromLocation Location? @relation("MovementFromLocation", fields: [fromLocationId], references: [id])
  toLocation   Location? @relation("MovementToLocation", fields: [toLocationId], references: [id])
  fromUser     User?     @relation("MovementFromUser", fields: [fromUserId], references: [id])
  toUser       User?     @relation("MovementToUser", fields: [toUserId], references: [id])
  approver     User?     @relation("MovementApprover", fields: [approvedBy], references: [id])
  creator      User?     @relation("MovementCreator", fields: [createdBy], references: [id])

  @@map("asset_movements")
}

// Maintenance Types
model MaintenanceType {
  id                     String  @id @default(uuid())
  companyId              String  @map("company_id")
  name                   String
  description            String?
  category               String? // preventive, corrective, predictive
  defaultFrequencyDays   Int?     @map("default_frequency_days")
  estimatedDurationHours Decimal? @map("estimated_duration_hours") @db.Decimal(5, 2)
  defaultCost            Decimal? @map("default_cost") @db.Decimal(12, 2)
  requiredSkills         String[] @map("required_skills")
  safetyRequirements     String[] @map("safety_requirements")
  isActive               Boolean  @default(true) @map("is_active")
  createdAt              DateTime @default(now()) @map("created_at")
  updatedAt              DateTime @updatedAt @map("updated_at")

  // Relations
  company    Company     @relation(fields: [companyId], references: [id], onDelete: Cascade)
  workOrders WorkOrder[]

  @@map("maintenance_types")
}

// Work Orders
model WorkOrder {
  id                    String    @id @default(uuid())
  companyId             String    @map("company_id")
  workOrderNumber       String    @unique @map("work_order_number")
  assetId               String?   @map("asset_id")
  maintenanceTypeId     String?   @map("maintenance_type_id")
  title                 String
  description           String?
  priority              String    @default("medium") // critical, high, medium, low
  status                String    @default("open") // open, in_progress, completed, cancelled, on_hold
  
  // Scheduling
  scheduledDate         DateTime? @map("scheduled_date")
  startedAt             DateTime? @map("started_at")
  completedAt           DateTime? @map("completed_at")
  estimatedHours        Decimal?  @map("estimated_hours") @db.Decimal(5, 2)
  actualHours           Decimal?  @map("actual_hours") @db.Decimal(5, 2)
  
  // Assignment
  assignedTo            String?   @map("assigned_to")
  assignedTeam          String[]  @map("assigned_team")
  vendorId              String?   @map("vendor_id")
  
  // Costs
  estimatedCost         Decimal?  @map("estimated_cost") @db.Decimal(12, 2)
  actualCost            Decimal?  @map("actual_cost") @db.Decimal(12, 2)
  laborCost             Decimal?  @map("labor_cost") @db.Decimal(12, 2)
  partsCost             Decimal?  @map("parts_cost") @db.Decimal(12, 2)
  vendorCost            Decimal?  @map("vendor_cost") @db.Decimal(12, 2)
  
  // Completion Details
  completionNotes       String?   @map("completion_notes")
  partsUsed             Json      @default("[]") @map("parts_used")
  completionPhotos      String[]  @map("completion_photos")
  
  createdBy             String?   @map("created_by")
  updatedBy             String?   @map("updated_by")
  createdAt             DateTime  @default(now()) @map("created_at")
  updatedAt             DateTime  @updatedAt @map("updated_at")

  // Relations
  company         Company          @relation(fields: [companyId], references: [id], onDelete: Cascade)
  asset           Asset?           @relation(fields: [assetId], references: [id])
  maintenanceType MaintenanceType? @relation(fields: [maintenanceTypeId], references: [id])
  assignee        User?            @relation("WorkOrderAssignee", fields: [assignedTo], references: [id])
  vendor          Vendor?          @relation(fields: [vendorId], references: [id])
  creator         User?            @relation("WorkOrderCreator", fields: [createdBy], references: [id])
  updater         User?            @relation("WorkOrderUpdater", fields: [updatedBy], references: [id])

  @@map("work_orders")
}

// Audit Logs (ISO compliance)
model AuditLog {
  id               String    @id @default(uuid())
  companyId        String    @map("company_id")
  userId           String?   @map("user_id")
  entityType       String    @map("entity_type") // asset, user, company, etc.
  entityId         String?   @map("entity_id")
  action           String    // create, update, delete, view, export
  oldValues        Json?     @map("old_values")
  newValues        Json?     @map("new_values")
  ipAddress        String?   @map("ip_address")
  userAgent        String?   @map("user_agent")
  sessionId        String?   @map("session_id")
  complianceEvent  Boolean   @default(false) @map("compliance_event")
  createdAt        DateTime  @default(now()) @map("created_at")

  // Relations
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  user    User?   @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}
